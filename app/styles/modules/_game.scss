/**
  * what: top brand
  * why: prominant display for the user
  */
.brand {
  margin-top: 0; //reset h2
  font-size: 3em;
  text-align: center;
  text-shadow: 0 -1px $color-black-transparent-70,
  0 -2px $color-black-transparent-70; //embedded effect
}

/**
  * what: the game board, it's shutter block that asks for user inputs
  * why: show / hide based on status of the game
  */
.game {
  position: relative; //parent for shutter that is absolutely positioned
  margin: 0 auto; //center align

  .shutter {
    position: absolute; //overlay on top of game board
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    padding: .5em;
    //reverse the effect of closing shutter when the game is on
    transition: color 300ms ease, transform 300ms ease 300ms;
    border-radius: 5px;
    background: $color-black-transparent-85;
    font-size: 2em;
    box-sizing: border-box;

    .message {
      text-align: center;
    }

    .keybindings { //keyboard shortcut text
      font-size: .45em;
      text-align: center;
    }
  }

  &.on { //close shutter when game starts
    .shutter {
      /* text within the shutter shrinks on scale transform
       * it doesn't look good, hence color is removed first
       * and then the element is shrinked (after 300ms wait out)
       */
      transform: scaleY(0);
      transition: color 300ms ease, transform 300ms ease 300ms;
      color: $color-black-transparent-85;
    }
  }
}

/**
  * what: game buttons / blocks and their relative styles when won/lost/tie
  * why: clear indication to the user asking for inputs and feedback on game (won/lost/tie)
  */
button.keypad {
  width: 130px;
  height: 130px;
  margin: 10px;
  border: 0;
  border-radius: 3px;
  background: $color-shadow;
  box-shadow: 0 0 8px 4px $color-black-transparent-70;
  //transition: background 150ms ease;

  &#a {
    background: $color-green;
    &:active,&.js-active{
      transition: background 150ms ease;
      background: lighten($color-green,70%);
    }
  }
  &#b {
    background: $color-red;
    &:active,&.js-active{
      transition: background 150ms ease;
      background: lighten($color-red, 40%);
    }
  }
  &#c {
    background: $color-orange;
    &:active,&.js-active{
      transition: background 150ms ease;
      background: lighten($color-orange, 40%);
    }
  }
  &#d {
    background: $color-cyan;
    &:active,&.js-active{
      transition: background 150ms ease;
      background: lighten($color-cyan, 40%);
    }
  }

}


.dashboard {
  display: flex;
  justify-content: space-between;
  align-items: center;
  font-size: 1.5em;
  height: 2em;
  color: $color-white-transparent-70;
  button {
    border: 0;
    border-radius: 3px;
    background: $color-shadow;
    color: $color-white-transparent-70;
    box-shadow: 0 0 8px 4px $color-black-transparent-70;
    font-size: .5em;
    padding: 5px;
  }
  h2{
    margin: 0;
    line-height: .7em;
    font-size: 1em;
    box-shadow: inset 0 0 8px 4px $color-black-transparent-70;
    padding: 10px;
    width: 1em;
    border-radius: 5px;
  }
}

.strict{
  .toggle{
    font-size: .5em;
    display: inline-block;
    span{
      padding: 5px;
      display: inline-block;
      transition: color 300ms ease, background 300ms ease;
      cursor: pointer;
      border: 1px solid $color-shadow;
      width: 2em;
      &:nth-of-type(odd){
        border-radius: 3px 0 0 3px;
      }
      &:nth-of-type(even){
        border-radius: 0 3px 3px 0;
      }
    }
    &.on{
      .on{
        background: $color-white-transparent-70;
        color: $color-shadow;
        transition: color 300ms ease, background 300ms ease;
      }
      .off{
        color: $color-shadow;
        background: $color-shadow;
        transition: color 300ms ease, background 300ms ease;
      }
    }
    &.off{
      .on{
        background: $color-shadow;
        color: $color-shadow;
        transition: color 300ms ease, background 300ms ease;
      }
      .off{
        transition: color 300ms ease, background 300ms ease;
      }
    }
  }
}
